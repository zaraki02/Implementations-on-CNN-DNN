# -*- coding: utf-8 -*-
"""Classify_CIFAR10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QjKtzbamJ8aDwiSfc4GFZznet5vktiuG
"""

import numpy as np
import tensorflow
import keras
import matplotlib.pyplot as plt

"""Extracting only 3 classes of the 10 classes in CIFAR10..."""

def classes_5(x,y):
  index_0, _ = np.where(y==0.0)
  index_1, _ = np.where(y==1.0)
  index_2, _ = np.where(y==2.0)
  index_3, _ = np.where(y==3.0)
  index_4, _ = np.where(y==4.0)

  indices = np.concatenate([index_0, index_1, index_2, index_3, index_4], axis = 0)
  x = x[indices]
  y = y[indices]

  count = x.shape[0] #Num of rows...
  
  #Making the indices random...
  indices = np.random.choice(range(count), count, replace=False)

  x = x[indices]
  y = y[indices]

  y = keras.utils.to_categorical(y)
  return x,y

(X_train, Y_train), (X_test, Y_test) = keras.datasets.cifar10.load_data()
X_train, Y_train = classes_5(X_train, Y_train)
X_test, Y_test = classes_5(X_test, Y_test)
print(X_train.shape, " ", Y_train.shape)
print(X_test.shape, " ", Y_test.shape)

class_names = ['aeroplane', 'car', 'bird', 'cat', 'deer']

def random_examples(x, y, p):
  indices = np.random.choice(range(x.shape[0]), 10, replace=False)

  x = x[indices]
  y = y[indices]
  p = p[indices]

  plt.figure(figsize = (10,5))
  for i in range(10):
    plt.subplot(2,5,i+1)
    plt.imshow(x[i])
    col = 'green' if np.argmax(y[i])==np.argmax(p[i]) else 'red'
    plt.xlabel(class_names[np.argmax(p[i])], color = col)
  plt.show()

random_examples(X_train,Y_train,Y_train)

from tensorflow.keras.layers import Conv2D, BatchNormalization, MaxPool2D, Flatten, Dense, Dropout
from tensorflow.keras.layers import Input

def create_model():
  def add_conv_block(model, fil):
    model.add(Conv2D(fil, 3, activation='relu', padding='same'))
    model.add(BatchNormalization())
    model.add(Conv2D(fil, 3, activation='relu'))
    model.add(MaxPool2D(pool_size=2))
    model.add(Dropout(0.5))
    return model
  model = tensorflow.keras.models.Sequential()
  model.add( Input( shape=(32, 32, 3)))

  model = add_conv_block(model, 32)
  model = add_conv_block(model, 64)
  model = add_conv_block(model, 128)
  model.add(Flatten())
  model.add(Dense(5, activation='softmax'))

  model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
  return model

model = create_model()
model.summary()

h = model.fit(X_train/255.0, Y_train, batch_size=64, epochs = 1, callbacks=[tensorflow.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=4)])

Y_pred = model.predict(X_test/255.)
random_examples(X_test, Y_test, Y_pred)

train_acc = h.history['accuracy']
#val_acc = h.history['val_accuracy']

plt.plot(range(len(train_acc)),train_acc)
#plt.plot(range(len(val_acc)),val_acc)

